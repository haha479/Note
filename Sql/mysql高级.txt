linux中mysql服务器目录结构
	数据库文件的存放目录：/var/lib/mysql;
		mysql5.7,innodb
			/var/lib/mysql下的ibdata1:系统表空间,存储所有表数据
			/var/lib/mysql/databasename/tablename.frm:存储指定的表结构
			/var/lib/mysql/databasename/tablename.ibd:独立表空间，存储指定表的数据
		mysql8.0,Innodb
			没有了frm文件，即相当于将frm文件idb文件合并了，表的结构与表数据都存于tablename.ibd中

		mysql5.7,myisam
			不同于innodb引擎，一个表对应三个不同后缀文件，分别是
			tablename.frm:存储表结构
			tablename.MYD:存储数据
			tablename.MYI:存储索引

		mysql8.0,myisam
			tablename.sdi:存储表结构			
			.
			.同上


	命令的存放目录：/usr/bin;/usr/sbin
	配置文件目录：/etc/my.conf;/usr/share/mysql-8.0

格式化终端查询结果输出
	select * from user\G;

用户管理
	创建用户
		create user '用户名'@'主机名' identified by '密码';
	修改用户名
		修改mysql.user表中字段名即可
	删除用户
		drop user '用户名'
	修改当前用户密码
		user()函数用于获取当前用户
		方式一:alter user user() identified by '新密码';
		方式二:set password='新密码';
	修改其他用户密码
		方式一:alter user '用户名'@‘主机名' identified by '新密码';
		方式二:set password for '用户名'@'主机名' = '新密码';

权限管理
	查看当前用户权限
		show grants;
	查看指定用户权限
		show grants for '用户名'@'主机名';
	赋予指定用户指定权限操作指定表
		grant 权限列表 on 数据库.表 to '用户名'@'主机名';
	赋予所有权限给指定用户
		grant all privileges on *.* to '用户名'@'主机名';

	收回权限
		revoke 权限列表 on 数据库.表 from '用户名'; 
	收回所有权限
		revoke all privileges on *.* from '用户名'@'主机名';
权限表
	mysql管理权限是通过权限表实现的
	权限表存放在数据库mysql中
		包括的表有user, db, table_priv, columns_priv等

角色管理(mysql8.0引入)
	角色方便管理拥有相同权限的用户，类似于linux中的用户组
	创建角色
		create role '角色名'@'主机名';
	给角色赋予权限
		grant 权限列表 on 数据库.表 to '角色名';
	查看角色权限
		show grants for '角色名'@'主机名';
	回收角色权限
		revoke 权限列表 on 数据库.表 from '角色名'@'主机名';
	用户与角色绑定
		grant '角色名'@'主机名' to '用户名'@'主机名';
	激活角色
		必须要激活角色后,用户才具备角色所有的权限
		set default '角色名'@'主机名' all to '用户名'@'主机名';
	查看当前回话已激活的角色
		select current_role();
	撤销用户与角色的绑定
		revoke '角色名'@'主机名' from '用户名'@'主机名';
	设置强制角色
		每个创建用户的默认角色，不需要手动设置

配置文件的使用
	ini文件中的[]下的内容，代表配置组，每个组下的配置不同，
	如mysqld代表服务端，mysql代表客户端

mysql逻辑架构
	连接层，服务层，引擎层，存储层

mysql

sql执行流程
	1.sql缓存机制(mysql8.0丢弃了)
		将查询语句作为key存储下来，查询结果作为value存储下来
		命中率低，并且存在错误性(now()函数),mysql8.0丢弃
	2.解析器
		对sql语法及语义进行分析
	3.优化器
		找到最优的执行方式，生成一个执行计划
	4.执行器
		对照执行计划执行
	5.引擎
		引擎调用底层文件系统，并返回查询结果


	查看最近几条sql执行的时间
		show profiles
	查看指定一条sql执行的过程(每个细节环节的执行时间)
		show profile for query queryID;//queryID可由命令show profiles查看

数据库缓冲池
	缓冲池不同于查询缓存，InnoDB中将数据存储在数据页中，缓冲池中主要存放数据页
	缓冲池优先将使用频次高的热数据进行加载
	查看缓存池大小
		show variable like 'innodb_pool_size'
	修改缓存池大小
		set global innodb_buffer_pool_size=大小;

存储引擎
	存储引擎就是指表的类型,以前名为"表处理器"
	8.0中默认使用InnoDB，只有该引擎支持事务

	表的存储引擎不同，在底层文件系统中存储表数据的文件结构就不同

	查看mysql提供的引擎
		show engines;

	查看系统默认的存储引擎
		show variables like '%storage_engine%';

	修改默认的存储引擎
		set default_storage_engine=MyISAM;

	创建表时显式指明该表存储引擎
		在创建语句最后加上 engine=引擎名;
 	
 	修改指定表所使用的引擎
 		alter table 表名 engine=引擎名;

页
	数据库的存储结构就是页，其也是磁盘与内存交互的基本单位
	在数据库中，不论读一行还是多行，都是将这些行所在的页进行加载。
	页的默认大小为16KB
	页与页之间可以不在物理结构上相连，只要通过双向链表相关联即可
	B+树的每一个结点都为一个数据页






索引
	从物理逻辑上说，索引主要有4种，普通索引，唯一索引，主键索引，全文索引
	从物理实现方式来说，索引分2种，聚簇索引，非聚簇索引
 	从作用字段个数来说，分为单列索引和联合索引

 	索引分为聚簇索引和非聚簇索引
 	针对主键构建的索引即为聚簇索引，否则为非聚簇索引
 
 	聚簇索引
 		一个表只能有一个聚簇索引,所有的用户记录都存储在了叶子结点上
 		使用记录主键值的大小进行记录和数据页的排序
 			1.页内的记录是按照主键的大小顺序排成一个单向链表
 			2.各个存放的用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表
 			3.存放目录项纪录的页分为不同的层次，
 			在同一层次中的数据页也是根据页中目录项纪录的主键大小顺序排成一个双向链表

 		缺点：
 			插入速度严重依赖于插入顺序
 			更新主键的代价很高


 	二级索引(辅助索引, 非聚簇索引)

 	MyISAM中B+树的叶子结点存储的都为数据地址


 	mysql8.0中的降序索引，隐藏索引
 		索引隐藏后同样影响数据的更新效率

 	索引的使用顺序

 	数据页分裂

 	hash索引
 		hash索引不支持order by排序，因为hash索引指向的数据是无序的
 		因此无法起到排序优化的作用


 	索引的设计原则
 		适合创建索引的情况


 		不适合创建索引的情况 

 	覆盖索引
 		一个索引包含了满足查询结果的数据就叫做覆盖索引，即无需回表

 	索引下推
 		


 	索引失效的情况
	 	最左前缀法则
	 		创建联合索引时，B+树优先按括号中第一个字段排列
	 		因此，在where条件中有对于多个字段的筛选时，多个字段中必须包含创建联合索引中时的第一个字段
	 		否则就无法使用上索引。
	 		如下：
	 			创建索引时
	 				create index idx_name on student(age, classid, name);
	 			查询时
	 				以下情况无法使用上索引，因为在B+树中age的值未确定
	 				select * from student where classid=4 and name='abcd';
	 				下面情况则使用上了索引，至于字段条件筛选的顺序，优化器会自动调整，即将三个筛选字段按联合索引创建时的顺序排列。
	 				select * from student where classid=4 and age=30 and name='abcd';
	 				以下查询虽然用到了该索引，却没有充分利用,因为跳过了classid，B+树创建时是按从左至右的字段排列的。
	 				select * from student where age=30 and name='abcd';
	 		总结一句话：where条件首先要有索引最左边的字段，其次想要充分利用联合索引，不能跳过字段

	 	范围条件右边的列索引失效
	 		如下情况
	 			创建索引
	 			create index idx_name on student(age, classid, name);
	 			如下查询语句只使用到了age, classid两个列索引
	 			select * from student where age=30 and classid>20 and name='abcd';

	 		总结：创建联合索引时，尽量将常用于范围筛选的字段写在后面。

	 	不等于<> != 索引失效

	 	is null可以使用索引, is not null无法使用索引

	 	like以通配符%开头会使索引失效

	 	or 前后存在非索引的列，索引失效

 	B树
 		树的每个结点都存放数据
 		同一层节点之间无任何形式的连接


 	B+树
 		树的叶子结点存储完整的行记录
 		树的非叶子结点存储索引键和页面指针，并不存储行记录本身
 		同一层结点之间通过双链表形式连接

 		特点：
 			根页面的位置万年不动，从上而下通过复制的方式生成页面

 	B+树的查询速度要高于B树
 		因为所有的关键字都出现在B+树都叶子结点上，并且叶子结点是通过链表连接的，
 		数据也是递增的，这样可以通过指针连接查找。而B树需要通过中序遍历完成查找，效率低。


行格式
	纪录在物理磁盘上的存储方式就称为行格式
	有：Compact, Redundant, Dynamic, Compressed
	查看mysql默认的行格式
		select @@innodb_default_row_format;
	查看具体表使用的行格式
		show table status like '表名' \G
	创建表时指定行格式
		在末尾加上row_format=行格式类型
	修改表格式
		alter table 表名 row_format=行格式类型;

	Compact
		1.记录的额外信息
			变长字段长度列表
			NULL值列表
			记录头信息

		2.记录的真实数据

区，段，碎片区
	区 
		一个区就是在物理位置上连续的64个页，
		在表中数据量大的时候，为某个索引分配空间的时候就不再按照页为单位分配了，
		而是按照区为单位分配，甚至在表中的数据特别多的时候，可以一次性分配多个连续的区。
	段
		区分B+树中叶子结点与非叶子结点
		非叶子结点有自己独有的区，叶子结点也有自己独有的区。
		存放叶子结点的区的集合就算是一个段，非叶子结点同理。
		段其实不对应表空间中某一个连续的物理区域，而是一个逻辑上的概念

	碎片区
		碎片区直属于表空间，并不属于任何一个段


性能分析
	查看指定sql的执行计划，并不执行(可能用到的索引等等)
		explain sql语句
	执行计划结果表中的字段
		ID:表示查询组，一般为一个select为一个ID
		table:表示查询的表名
		select_type:查询语句中的查询类型，有性能参考价值
		possible_keys:可能使用的索引，列举多个
		key:实际会使用到的索引,优化器会选择查询最优的索引,但不一定是查询最快的索引
		key_len:实际使用的索引长度(字节数),检查是否充分利用上了索引,主要针对联合索引
		rows:预估需要读取的条目数
		filtered:经过搜索条件过滤后剩余记录条数的百分比
		extra:列举一些额外信息


join的底层原理
	其内部就是循环匹配，通过从主表中拿出一条记录与从表中的记录一条一条匹配

	外连接存在主从表之分，而内连接时，优化器也会内部决定主从表，即驱动表与被驱动表。
	但外连接也未必可以决定主从表，主从表最终还是由优化器在内部决定的。
	可通过straight_join关键字来告诉优化器不要破坏主从表，而由用户在查询时的语句语法决定。

	连接查询优化
	 	对于内连接来说，查询优化器可以决定谁作为驱动表，谁在作为被驱动表
	 	如果表的连接条件中只有一个字段有索引，则有索引的字段所在的表会被作为被驱动表，
	 	这样可以加快连接的效率
		另外，若都存在索引或都不存在索引的情况下，会选小表作为驱动，即小表驱动大表。

	8.0新特性:hash join
		hash join是做大数据集连接时的常用方式，优化器使用两个表中较小的表利用join key在内存中建立散列表，然后扫描较大的表并探测散列表，找出与Hash表匹配的行

子查询优化
	执行子查询时，MySQL需要为哪层查询语句的查询结果建立临时表


order by优化

group by优化

































