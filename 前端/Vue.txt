声明式渲染:
	通过在Vue的实例里面定义字典属性来锁定页面元素
	<div id="app">
		{{ message }}
	</div>

	var app = new Vue({
		el: '#app',
		data: (
			message: 'hello Vue!'		
		)
	})

绑定元素特性(指令: v-bind):
	通过给元素定义特殊属性来控制元素
	<div id="app-2">
		<span v-bind:title="message">
		鼠标悬停可查看提示信息
		</span>
	</div>

	var app2 = new Vue({
		el: '#app-2',
		data: {
			message: '页面加载于' + new Date().toLocaleString()

		}
	})

控制一个元素是否显示(指令: v-if):
	<div id="app-3">
		<p v-if="seen">你能看到我吗</p>
	<div>

	var app3 = new Vue({
		el: '#app-3',
		data: {
			seen: true
		}
	})

绑定数组的数据来渲染一个项目列表(v-for):
	<div id="app-4">
		<ol>
			<li v-for="todo in todos">
				{{ todo.text }}
			</li>
		</ol>
	</div>

	var app4 = new Vue({
		el: '#app-4', 
		data:{
			todos:[
				{text: '学习Javascript'},
				{text: '学习Vue'}
				{text: '搞个牛项目'}
			]
		}
	})

时间事件监听器(指令:v-on)
	<div id="app-5">
		<p>{{ message }}</p>
		<button v-on="reversemessage">逆转文字</button>
	</div>

	var app-5 = new Vue(){
		el: 'app-5',
		data: {
			message: 'hello Vue.js'
		},
		methods: {
			reversemessage: function(){
				this.message = this.message.split('').reverse().join('')
			}
		}
	}


实现表单与应用间的双向绑定(指令:v-model):
	<div id='app-6'>
		<p>{{ message }}</p>
		<input v-model='message'></input>
	</div>

	var app6 = new Vue({
		el: '#app-6',
		data:{
			message: 'hello Vue!'
		}

	})