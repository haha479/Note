数据仓库并不是数据的最终目的地，而是为数据最终的目的地做准备，这些准备包括对数据的：备份、清洗、聚合、统计等

数仓分层
	原始数据层ODS(Operation Data Store): 存放未经处理的原始数据, 结构上与原系统保持一致, 是数据仓库的数据准备区

	明细数据层DWD(Data Warehouse Detail):基于维度建模理论进行构建, 存放维度模型中的事实表, 保存各业务过程最小粒度的操作记录(事实表)

	公共维度层DIM(Dimension)基于维度建模理论进行构建, 存放维度模型中的维度表, 保存一致性维度信息(维度表)

	汇总数据层DWS(Data Warehouse Summary):基于上层的指标需求, 以分析的主题对象作为建模驱动, 构建公共统计粒度的汇总表, 实际存储的就是公用的中间计算结果, 以供给后续指标需求直接使用(数据绝大多数来自于DWD层,结合事实表和维度表进行统计, 减少重复计算)

	数据应用层ADS(Application Data Service):存放各项统计指标结果


业务数据使用DataX, 用户行为数据使用Flume

业务数据库中, 有一部分表无需做增量同步, 如中国的省份表, 只需在一开始做一次全量同步即可有一部分表则需要每日做一次增量同步.

数据仓库开发重要的两点:
	1.建模：为了更方便的管理数据
		将数据有序的组织和存储起来之后，数据才能得到高性能、低成本、高效率、高质量的使用。
		高性能：良好的数据模型能够帮助我们快速查询所需要的数据。
		低成本：良好的数据模型能减少重复计算，实现计算结果的复用，降低计算成本。
		高效率：良好的数据模型能极大的改善用户使用数据的体验，提高使用数据的效率。
		高质量：良好的数据模型能改善数据统计口径的混乱，减少计算错误的可能性。

	2.写sql

使用dophin scheduler调度数仓中多个需要顺序执行的子任务

数据库的规范化
	遵循范式(1,2,3,巴斯-科德范式,4,5), 范式级别越高, 数据冗余性越低, 占用存储空间越小, 表之间的关系越复杂, 数据查询的效率会越低.
三范式核心原则:
	第一范式: 属性不可切割
	第二范式: 不能存在"部分函数依赖"
	第三范式: 不能存在"传递函数依赖"

ER模型: 实体+关系, 缺点: 关系表相对较多, 对于数据的分析较困难
维度模型：事实+维度, 缺点：维度表中可能会存在大量的数据冗余
维度建模以数据分析作为出发点, 为数据分析服务, 因此它关注的重点是用户如何更快的完成需求分析以及如何实现较好的大规模复杂查询的响应性能
维度模型更加适合数据仓库的建模
ER模型更加适合关系型数据库的建模

事实表
	1. 事务事实表
	    事务型事实表用来记录各业务过程，它保存的是各业务过程的原子操作事件，即最细粒度的操作事件。粒度是指事实表中一行数据所表达的业务细节程度。事务型事实表可用于分析与各业务过程相关的各项统计指标，由于其保存了最细粒度的记录，可以提供最大限度的灵活性，可以支持无法预期的各种细节层次的统计需求。
	    确定维度时应尽量多的选择与业务过程相关的环境信息。因为维度的丰富程度就决定了维度模型能够支持的指标丰富程度

	2.周期快照事实表
		周期快照事实表以具有规律性的、可预见的时间间隔来记录事实，主要用于分析一些存量型（例如商品库存，账户余额）或者状态型（空气温度，行驶速度）指标。
		对于商品库存、账户余额这些存量型指标，业务系统中通常就会计算并保存最新结果，所以定期同步一份全量数据到数据仓库，构建周期型快照事实表，就能轻松应对此类统计需求，而无需再对事务型事实表中大量的历史记录进行聚合了。

	3.累积快照事实表
		累计快照事实表是基于一个业务流程中的多个关键业务过程联合处理而构建的事实表，如交易流程中的下单、支付、发货、确认收货业务过程。累积型快照事实表通常具有多个日期字段，每个日期对应业务流程中的一个关键业务过程.
		之所以叫累积快照事实表, 是因为表中的数据是慢慢增量同步累积的.

维度表
	维度表主要包含一个主键和各种维度字段，维度字段称为维度属性
	维度属性的丰富程度直接影响到数据模型能够支持的指标的丰富程度
	确定维度属性:
	1.尽可能生成丰富的维度属性
		维度属性是后续做分析统计时的查询约束条件、分组字段的基本来源，是数据易用性的关键。维度属性的丰富程度直接影响到数据模型能够支持的指标的丰富程度。
	2.尽量不使用编码，而使用明确的文字说明，一般可以编码和文字共存。
	3.尽量沉淀出通用的维度属性
		有些维度属性的获取需要进行比较复杂的逻辑处理，例如需要通过多个字段拼接得到。为避免后续每次使用时的重复处理，可将这些维度属性沉淀到维度表中。

	规范化是指使用一系列范式设计数据库的过程，其目的是减少数据冗余，增强数据的一致性。通常情况下，规范化之后，一张表的字段会拆分到多张表。
	反规范化是指将多张表的数据冗余到一张表，其目的是减少join操作，提高查询性能。
	在设计维度表时，如果对其进行规范化，得到的维度模型称为雪花模型，如果对其进行反规范化，得到的模型称为星型模型。

	数据仓库系统的主要目的是用于数据分析和统计，所以是否方便用户进行统计分析决定了模型的优劣。采用雪花模型，用户在统计分析的过程中需要大量的关联操作，使用复杂度高，同时查询性能很差，而采用星型模型，则方便、易用且性能好。所以出于易用性和性能的考虑，维度表一般是很不规范化的

	保存维度数据的历史状态，通常有以下两种做法，分别是全量快照表和拉链表
		全量快照表
			如进行每日全量同步, 以每日作为一个分区记录全量表数据. 如果数据的变化量不大, 则存储了大量相同的数据,比较浪费存储空间
		拉链表
			记录每条信息的生命周期, 一旦信息发生变化, 则该条信息的生命周期结束, 并重新记录最新的信息, 重新开启新的生命周期.


数据仓库构建流程
	1.数据调研
		业务调研
			熟悉业务流程, 熟悉业务数据
		需求分析
			明确需求所需的业务过程及维度

	2.明确数据域
		意义是便于数据的管理和应用.
		根据业务过程或者部门进行划分, 一个业务过程只能属于一个数据域

	3.构建业务总线矩阵
		业务总线矩阵中包含维度模型所需的所有事实以及维度, 以及各业务过程与各维度的关系.
		这一步完成, 一般就能确定较完整的维度模型(事务型事实表和维度表), 所以构建业务总线矩阵的过程就是设计维度模型的过程.

	4.明确统计指标
		使指标定义标准化, 即指标的定义遵循同一套标准.

		指标体系
			1.原子指标
				原子指标基于某一业务过程的度量值，是业务定义中不可再拆解的指标，原子指标的核心功能就是对指标的聚合逻辑进行了定义.
				原子指标只是用来辅助定义指标一个概念, 通常不会对应有实际统计需求与之对应.
				原子指标三要素:业务过程, 度量值, 聚合逻辑
			2.派生指标
				派生指标基于原子指标, 派生指标通常会对应实际的统计需求.
				派生指标 = 原子指标 + 统计周期 + 业务限定 + 统计粒度
				如现有一派生指标: 最近一天各省份手机品类订单总额. 
				其中订单总额对应原子指标, 最近一天对应统计周期, 品类为手机对应业务限定, 省份对应统计粒度.
			3.衍生指标
				衍生指标是在一个或多个派生指标的基础上, 通过各种逻辑运算复合而成的.例如比率、比例等类型的指标.

			指标体系对于数仓的意义
				当统计需求足够多时, 必然会出现部分统计需求对应的派生指标相同的情况.
				这种情况下, 我们就可以考虑将这些公共的派生指标保存下来, 这样做的主要目的就是减少重复计算, 提高数据的复用性.
				这些公共的派生指标统一保存在数据仓库的DWS层.

	5.维度模型设计
		参照业务总线矩阵. 事实表存储在DWD层, 维度表存储在DIM层.
		
	6.汇总模型设计
		汇总模型的设计参考指标体系. 
		汇总表与派生指标的对应关系是，一张汇总表通常包含业务过程相同、统计周期相同、统计粒度相同的多个派生指标.

