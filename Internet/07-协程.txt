并发服务器（同时可以服务多个客户端） ：
	多进程 :
		耗费资源
	单进程不堵塞服务器:
		只能在访问量不是很大的情况下使用,访问量大了效率低

	单进程select回显服务器（轮询的方法）:
		select的一个缺点在于单个进程能够监视的文件描述符的数量一般最大为1024
		虽然用其他的方法可以提升这个限制,但也会造成效率低的情况
	
	使用poll构建（轮询的方法）:
		解决了套接字上限的问题,采用的是轮询的方式
	
	使用epoll（事件通知）:
		解决了套接字上线的问题,采用的是时间通知的方式
	
	使用多线程 :
		线程的切换是由CPU决定的，线程间切换消耗特别大
	
	使用协程 :
		协程间的切换是用户级别的,切换是由自己控制,不受外力控制
		操作系统不知道它的存在
		协程能保存上一次调用是的状态（即所有局部状态的一个特定组合），
		每次过程重入时，就相当于进入上一次调用的状态，
		换种说法：进入上一次离开时所处逻辑流的位置

		但是协程的切换只是单纯的操作CPU的上下文，
		所以一秒钟切换个上百万次系统都抗的住	
		
		协程也属于单线程
在gevent中时间耗时的方式

切换协程的方式只有耗时吗

堵塞也属于耗时
