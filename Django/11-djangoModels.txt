模型类 --- models.py（主要用与数据库跟django的交互）

ORM :
	MVC框架中一个重要的部分,就是ORM,它实现了数据模型与数据库的解耦,使开发时不需要面对sql语句,而是通过
	面向对象来操作数据库

model的作用是定义出对象模型，一般都是和数据库里表对应，一个表一个model类，表里面的字段对应model类的属性，

使用models模块,我们可以操作数据库,但是不需要写sql语句,model模块中都给我们封装好了

在models中定义类,继承models.model , model中内部写了sql语句,只需要调用就行了,类对应的也就是数据库中的表


django使用mysql数据库（链接数据库）,在setting.py文件中配置
	DATABASES = {
	    'defult':{
		'ENGINE':'django.db.backends.mysql',
		'NAME':'test2' #数据库名
		'USER': '用户名'
		'PASSWORD': '密码'
		'HOST': '数据库服务器ip,本地可以使用localhost'
		'PORT':	'端口，默认为3306'
		}
	在项目的init文件内导入pymysql,并且写上pymysql.install_as_MySQLdb()	


在定义类中属性时,需要自定义字段类型,例如Charfield,Booleanfield,
	字段类型:
		Charfield : 字符串 , Booleanfield : 布尔值 , IntegerField：整数
在这些字段类型函数里面,参数可以写字段选项(限制字段)，字段默认值等
	参数中还可以定义一个verbose_name = ""
		属性值就是在admin后台显示的信息，等于是自定义在admin网页中显示的字段名

元选项():
	在指定的模型类内定义一个元类,不用继承任何类:
	1.可以自定义更改数据库中表的名字
		db_table='自定义的表名'
	2.以汉字形式在后台管理页面显示表名(更改在admin中显示的模型类名)
		verbose_name = ''
		verbose_name_plural = verbose_name 

小总结:
	在admin后台管理中用中文显示表信息
		1.模型类中: def __str__(self):
				return self.name
		
		2.定义字段属性的函数参数中,传入verbose_name='',admin中指定的字段会替换成该值
		
		3.模型类中定义一个Meta类,不继承任何类,定义类属性,verbose_name = '需要修改成的值'

管理器manager:
	管理器是模型类的一个属性,用于将对象和数据表映射
	任何一个模型类django都对默认创建一个objects管理器,用于和数据库做交互,是ORM的核心
	
	自定义管理器(可以定义多个):
		定义一个类,继承models.Manager,
				重写方法:
					get_queryset(self):
						return super(BookInfoManager,self).get_queryset()
		作用:
			自定义后,更改查询集(更改之后就是使用自定义的管理器查询了),还可以在自定义类中加上查询时的过滤方法,这个方法在查询时的all()内部就调用了

			还可以增加模型类对象的创建方法（更快速）:
				推荐使用第 1 种
					1.在自定义管理器类中定义一个模型类对象创建方法,不过是对象的方法,然后下次创建模型类对象时也可以直接传参
					  在方法的最下面要记得返回在方法中创建的对象
						创建模型类对象：
							b = 模型类.自定义的管理器.创建的对象方法(传入数据)

					2.默认在模型类中是不能写init方法的,所以就需要定义一个类方法来代替init接收参数
					  在类中定义一个类的方法,然后再创建模型类对象的时候,可以直接传入要设置的表中信息,
					  在方法的最下面要记得返回在方法中创建的对象
						创建模型类对象:
							b = 模型类.类方法(传入的数据则是表中的数据)

					


#下面这些增删改查也可以在后台管理admin网页中操作

查询:
	查询指定表中所有数据:
		类名.objects.all(),如果自定义了管理器,则是，类名.自定义的名字.all(),下同
	
	惰性执行:
		创建查询集不会带来任何数据库的访问,直到调用数据时,才会访问数据库
		迭代,序列化,与if合用,会立即访问数据库	

	获取一对多对应的所有数据
		book.heroinfo_set.all()
	
	过滤器 :
		all(),返回所有的表数据
			模型类.管理器.all()

		filter(),指定限制条件过滤
			模型类.管理器.filter(限制条件1,限制条件2)
		exclude()
 		
		order_by() 
		
		values(): 一个对象构成一个字典,返回一个列表
	返回单个值方法:
		get()
			括号内可以写条件,不满足会报错
		count()
			返回当前查询的总条数
		first()
			返回第一个对象
		last()
			返回最后一个对象
		exists()
			判断查询集中是否有数据,True false
	
	比较运算符
		contains:是否包含
		startswith : 以什么开头
		endswith : 以什么结尾
		isnull,isnotnull : 是否为空
		上面这些在开头加上 'i',则不会区分大小写
		in : 是否包含在范围内 (需要指定一个范围)
		gt,gte,it,ite: 大于、大于等于、小于、小于等于
		year、month、day、week_day、hour、minute、second：对日期间类型的属性进行运算
	
		下面三个都需要引入模块 ：from django.db.models import max,F,Q
	
	聚合:
		Avg,Max,Min,Sum
		例如：
			date = list.aggregate(Max('id')) #则返回的是id最大值
			
	F对象
		用于两个字段间的比较
			例如 :
				模型类.管理器.filter(字段1__gt=F('字段2')) #返回字段1大于字段2的
	
	Q对象
		专用于逻辑或
			例如 :
				模型类.管理器.filter(Q(pk__it=6) | Q(bcommet__gt=10)) #主键小于6或者阅读量大于10的
		
增加数据:
	设置表数据(也就是给实例对象属性值赋值,然后通过类属型去映射)

	创建models模块中的类的实例对象，设置实例属性, 
	[设置的是实例属性(但是要跟类中的类属性同名（如果不一样,就不知道这个属性映射到表中的哪个字段当中去了）)]
		就像在类中定义了类属性 btitle = models.CharField(max_length=20),
		设置实例属性也应该, 实例属性.btitle=...

	保存到数据库 : 实例对象.save()
	

		
修改数据:
	实例对象.属性 = ...

删除数据:
	实例对象.delete()

如果在models模块中添加了方法,需要再迁移一遍吗.
	不需要再去迁移（同步数据库）,因为数据库中存储的是数据,
	数据是没有改变的
		





