view.py中主要编写业务逻辑的代码,负责接收接收web请求和返回web响应

url :
	在应用下创建一个urls.py文件为子路由,urlpatterns是一个url()对象实例的列表,一个url有三个参数,
	url(正则,视图函数,名称),若需要从url中捕获一个值,需要在他周围设置一对小括号

自定义参数:
	在url中将正则用小括号括起来就代表会将该正则传给视图函数中,该视图函数必须定义参数接收,
	在接收参数时,在括号内正则前,写上?P<选择接收的参数，也就是在视图函数中定义的参数名>,尖括号中的参数就会
	指定传给视图函数中同名的参数,没有顺序可言

浏览器中分页显示信息：
	在内存中将数据库的sql查询结果序列化后保存起来,按配置的每页记录数,返回不同的列表

在报404错误时,自己写一个页面返回,在templates文件中写一个404.html,在每次报404错误就会显示404.html页面
	但是需要设置以下两点

1.settings文件中设置是否调试,设置DEBUG=False,默认为True,开发中为了调试一般就设置为true

2.ALLOWED_HOSTS = [允许访问的电脑地址],括号中写'*'表示任何

3.在模板目录下创建一个404的模板文件

在网页中输出报错路径
	request_path


request对象   
	含有的属性:path(请求路径) ,method(请求方式)都是字符串
	
	方法
		is_ajax(),判断是否是使用的ajax

网址中传入值，并在视图函数中使用request对象接收:
	在url后面加上？，每个值用 & 隔开，例如: index/?a=1&b=2
		通过request.GET['a']获取数据

	如果是index/?a=1&a=2,也就是一键对多值,使用request.GET.getlist()获取,
	得到的是一个列表

POST请求方式:
	一般用于表单,表单项的name属性,就是在试图中的键,
	获取一键对应一值: request.POST['表单项的name']
	获取一键对多值 : request.POST.get('表单项的name')


response对象:
	content :表示返回的内容
	charset : 表示response采用的编码字符集,字符串类型
	status_code : 响应的HTTP响应代码
	content-type : 指定输出的MIME类型


			